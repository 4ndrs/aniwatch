/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "query Anime($id: Int!) {\n  Media(type: ANIME, id: $id) {\n    id\n    bannerImage\n    description\n    coverImage {\n      extraLarge\n    }\n    title {\n      romaji\n      english\n      native\n    }\n    rankings {\n      rank\n      type\n      allTime\n      context\n    }\n    format\n    episodes\n    duration\n    status\n    startDate {\n      day\n      month\n      year\n    }\n    endDate {\n      day\n      month\n      year\n    }\n    season\n    seasonYear\n    averageScore\n    studios {\n      edges {\n        isMain\n        node {\n          id\n          name\n        }\n      }\n    }\n    source\n    hashtag\n    genres\n    synonyms\n    externalLinks {\n      icon\n      color\n      language\n      site\n      url\n      id\n    }\n    relations {\n      edges {\n        id\n        relationType(version: 2)\n        node {\n          title {\n            romaji\n          }\n          coverImage {\n            medium\n          }\n          format\n          status\n        }\n      }\n    }\n    characters(perPage: 6, sort: RELEVANCE) {\n      edges {\n        id\n        role\n        node {\n          name {\n            last\n            first\n          }\n          image {\n            large\n          }\n        }\n        voiceActors(language: JAPANESE) {\n          name {\n            first\n            last\n          }\n          image {\n            large\n          }\n        }\n      }\n    }\n    staff(perPage: 3, sort: RELEVANCE) {\n      edges {\n        id\n        role\n        node {\n          name {\n            last\n            first\n          }\n          image {\n            large\n          }\n        }\n      }\n    }\n    recommendations(perPage: 7, sort: [RATING_DESC, ID]) {\n      nodes {\n        id\n        mediaRecommendation {\n          title {\n            romaji\n          }\n          coverImage {\n            large\n          }\n        }\n      }\n    }\n    reviews(perPage: 4) {\n      nodes {\n        id\n        summary\n        rating\n        user {\n          name\n          avatar {\n            medium\n          }\n        }\n      }\n    }\n  }\n}": typeof types.AnimeDocument,
    "query TopAnime($page: Int!, $perPage: Int!, $search: String, $startYear: String) {\n  Page(page: $page, perPage: $perPage) {\n    pageInfo {\n      hasNextPage\n    }\n    media(\n      type: ANIME\n      sort: SCORE_DESC\n      search: $search\n      isAdult: false\n      startDate_like: $startYear\n    ) {\n      id\n      title {\n        romaji\n      }\n      coverImage {\n        color\n        large\n      }\n      startDate {\n        year\n      }\n      endDate {\n        year\n      }\n      duration\n      format\n      genres\n      season\n      episodes\n      seasonYear\n      averageScore\n      studios {\n        edges {\n          isMain\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}": typeof types.TopAnimeDocument,
    "query YearBounds($minDate: FuzzyDateInt = 19000101) {\n  min: Media(type: ANIME, sort: START_DATE, startDate_greater: $minDate) {\n    startDate {\n      year\n    }\n  }\n  max: Media(type: ANIME, sort: START_DATE_DESC, startDate_greater: $minDate) {\n    startDate {\n      year\n    }\n  }\n}": typeof types.YearBoundsDocument,
};
const documents: Documents = {
    "query Anime($id: Int!) {\n  Media(type: ANIME, id: $id) {\n    id\n    bannerImage\n    description\n    coverImage {\n      extraLarge\n    }\n    title {\n      romaji\n      english\n      native\n    }\n    rankings {\n      rank\n      type\n      allTime\n      context\n    }\n    format\n    episodes\n    duration\n    status\n    startDate {\n      day\n      month\n      year\n    }\n    endDate {\n      day\n      month\n      year\n    }\n    season\n    seasonYear\n    averageScore\n    studios {\n      edges {\n        isMain\n        node {\n          id\n          name\n        }\n      }\n    }\n    source\n    hashtag\n    genres\n    synonyms\n    externalLinks {\n      icon\n      color\n      language\n      site\n      url\n      id\n    }\n    relations {\n      edges {\n        id\n        relationType(version: 2)\n        node {\n          title {\n            romaji\n          }\n          coverImage {\n            medium\n          }\n          format\n          status\n        }\n      }\n    }\n    characters(perPage: 6, sort: RELEVANCE) {\n      edges {\n        id\n        role\n        node {\n          name {\n            last\n            first\n          }\n          image {\n            large\n          }\n        }\n        voiceActors(language: JAPANESE) {\n          name {\n            first\n            last\n          }\n          image {\n            large\n          }\n        }\n      }\n    }\n    staff(perPage: 3, sort: RELEVANCE) {\n      edges {\n        id\n        role\n        node {\n          name {\n            last\n            first\n          }\n          image {\n            large\n          }\n        }\n      }\n    }\n    recommendations(perPage: 7, sort: [RATING_DESC, ID]) {\n      nodes {\n        id\n        mediaRecommendation {\n          title {\n            romaji\n          }\n          coverImage {\n            large\n          }\n        }\n      }\n    }\n    reviews(perPage: 4) {\n      nodes {\n        id\n        summary\n        rating\n        user {\n          name\n          avatar {\n            medium\n          }\n        }\n      }\n    }\n  }\n}": types.AnimeDocument,
    "query TopAnime($page: Int!, $perPage: Int!, $search: String, $startYear: String) {\n  Page(page: $page, perPage: $perPage) {\n    pageInfo {\n      hasNextPage\n    }\n    media(\n      type: ANIME\n      sort: SCORE_DESC\n      search: $search\n      isAdult: false\n      startDate_like: $startYear\n    ) {\n      id\n      title {\n        romaji\n      }\n      coverImage {\n        color\n        large\n      }\n      startDate {\n        year\n      }\n      endDate {\n        year\n      }\n      duration\n      format\n      genres\n      season\n      episodes\n      seasonYear\n      averageScore\n      studios {\n        edges {\n          isMain\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}": types.TopAnimeDocument,
    "query YearBounds($minDate: FuzzyDateInt = 19000101) {\n  min: Media(type: ANIME, sort: START_DATE, startDate_greater: $minDate) {\n    startDate {\n      year\n    }\n  }\n  max: Media(type: ANIME, sort: START_DATE_DESC, startDate_greater: $minDate) {\n    startDate {\n      year\n    }\n  }\n}": types.YearBoundsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Anime($id: Int!) {\n  Media(type: ANIME, id: $id) {\n    id\n    bannerImage\n    description\n    coverImage {\n      extraLarge\n    }\n    title {\n      romaji\n      english\n      native\n    }\n    rankings {\n      rank\n      type\n      allTime\n      context\n    }\n    format\n    episodes\n    duration\n    status\n    startDate {\n      day\n      month\n      year\n    }\n    endDate {\n      day\n      month\n      year\n    }\n    season\n    seasonYear\n    averageScore\n    studios {\n      edges {\n        isMain\n        node {\n          id\n          name\n        }\n      }\n    }\n    source\n    hashtag\n    genres\n    synonyms\n    externalLinks {\n      icon\n      color\n      language\n      site\n      url\n      id\n    }\n    relations {\n      edges {\n        id\n        relationType(version: 2)\n        node {\n          title {\n            romaji\n          }\n          coverImage {\n            medium\n          }\n          format\n          status\n        }\n      }\n    }\n    characters(perPage: 6, sort: RELEVANCE) {\n      edges {\n        id\n        role\n        node {\n          name {\n            last\n            first\n          }\n          image {\n            large\n          }\n        }\n        voiceActors(language: JAPANESE) {\n          name {\n            first\n            last\n          }\n          image {\n            large\n          }\n        }\n      }\n    }\n    staff(perPage: 3, sort: RELEVANCE) {\n      edges {\n        id\n        role\n        node {\n          name {\n            last\n            first\n          }\n          image {\n            large\n          }\n        }\n      }\n    }\n    recommendations(perPage: 7, sort: [RATING_DESC, ID]) {\n      nodes {\n        id\n        mediaRecommendation {\n          title {\n            romaji\n          }\n          coverImage {\n            large\n          }\n        }\n      }\n    }\n    reviews(perPage: 4) {\n      nodes {\n        id\n        summary\n        rating\n        user {\n          name\n          avatar {\n            medium\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query Anime($id: Int!) {\n  Media(type: ANIME, id: $id) {\n    id\n    bannerImage\n    description\n    coverImage {\n      extraLarge\n    }\n    title {\n      romaji\n      english\n      native\n    }\n    rankings {\n      rank\n      type\n      allTime\n      context\n    }\n    format\n    episodes\n    duration\n    status\n    startDate {\n      day\n      month\n      year\n    }\n    endDate {\n      day\n      month\n      year\n    }\n    season\n    seasonYear\n    averageScore\n    studios {\n      edges {\n        isMain\n        node {\n          id\n          name\n        }\n      }\n    }\n    source\n    hashtag\n    genres\n    synonyms\n    externalLinks {\n      icon\n      color\n      language\n      site\n      url\n      id\n    }\n    relations {\n      edges {\n        id\n        relationType(version: 2)\n        node {\n          title {\n            romaji\n          }\n          coverImage {\n            medium\n          }\n          format\n          status\n        }\n      }\n    }\n    characters(perPage: 6, sort: RELEVANCE) {\n      edges {\n        id\n        role\n        node {\n          name {\n            last\n            first\n          }\n          image {\n            large\n          }\n        }\n        voiceActors(language: JAPANESE) {\n          name {\n            first\n            last\n          }\n          image {\n            large\n          }\n        }\n      }\n    }\n    staff(perPage: 3, sort: RELEVANCE) {\n      edges {\n        id\n        role\n        node {\n          name {\n            last\n            first\n          }\n          image {\n            large\n          }\n        }\n      }\n    }\n    recommendations(perPage: 7, sort: [RATING_DESC, ID]) {\n      nodes {\n        id\n        mediaRecommendation {\n          title {\n            romaji\n          }\n          coverImage {\n            large\n          }\n        }\n      }\n    }\n    reviews(perPage: 4) {\n      nodes {\n        id\n        summary\n        rating\n        user {\n          name\n          avatar {\n            medium\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query TopAnime($page: Int!, $perPage: Int!, $search: String, $startYear: String) {\n  Page(page: $page, perPage: $perPage) {\n    pageInfo {\n      hasNextPage\n    }\n    media(\n      type: ANIME\n      sort: SCORE_DESC\n      search: $search\n      isAdult: false\n      startDate_like: $startYear\n    ) {\n      id\n      title {\n        romaji\n      }\n      coverImage {\n        color\n        large\n      }\n      startDate {\n        year\n      }\n      endDate {\n        year\n      }\n      duration\n      format\n      genres\n      season\n      episodes\n      seasonYear\n      averageScore\n      studios {\n        edges {\n          isMain\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query TopAnime($page: Int!, $perPage: Int!, $search: String, $startYear: String) {\n  Page(page: $page, perPage: $perPage) {\n    pageInfo {\n      hasNextPage\n    }\n    media(\n      type: ANIME\n      sort: SCORE_DESC\n      search: $search\n      isAdult: false\n      startDate_like: $startYear\n    ) {\n      id\n      title {\n        romaji\n      }\n      coverImage {\n        color\n        large\n      }\n      startDate {\n        year\n      }\n      endDate {\n        year\n      }\n      duration\n      format\n      genres\n      season\n      episodes\n      seasonYear\n      averageScore\n      studios {\n        edges {\n          isMain\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query YearBounds($minDate: FuzzyDateInt = 19000101) {\n  min: Media(type: ANIME, sort: START_DATE, startDate_greater: $minDate) {\n    startDate {\n      year\n    }\n  }\n  max: Media(type: ANIME, sort: START_DATE_DESC, startDate_greater: $minDate) {\n    startDate {\n      year\n    }\n  }\n}"): (typeof documents)["query YearBounds($minDate: FuzzyDateInt = 19000101) {\n  min: Media(type: ANIME, sort: START_DATE, startDate_greater: $minDate) {\n    startDate {\n      year\n    }\n  }\n  max: Media(type: ANIME, sort: START_DATE_DESC, startDate_greater: $minDate) {\n    startDate {\n      year\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;